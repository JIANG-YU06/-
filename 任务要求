任务1：哈夫曼编码
输入n个带权重的节点（如A，3，B，14，C，8，D，7，E，8），显示出生成的哈夫曼树数组并显示各
字符的哈夫曼编码，要求根100的例题必须验证(A,3,B,5,C,11,D,23,E,29,F,14,G,7,H,8)

任务2：三国演义字符权重
对已给定的《三国演义》的每个字符求权重，得到权重的文本文件（要求有两位或以上的同学结果相
同，不限制编程语言）

任务3：三国演义哈夫曼编码
对任务2的权重文件，求其每个字符的哈夫曼编码，得到哈夫曼编码文件（要求有两位或以上的同学结果
相同，C语言编程）

任务4：三国演义压缩与解压
1）对《三国演义》进行哈夫曼编码压缩，生成一个压缩的数据文件，压缩的数据文件不能比原文件大
2）对生成的压缩文件进行解压，能还原成原文件

任务5：三国演义超级压缩与解压
按字和词组进行压缩与解压，并与按字符压缩进行比较，评价那种压缩效果好

任务6：三国演义自解压文件
生成一个exe文件，运行后能"生成三国演义.txt"文件(最好还能删除exe文件)，且exe文件尽量比txt文件
小

哈夫曼树介绍：
哈夫曼树又称最优二叉树（注意：并不是所有的二叉树都是哈夫曼树），是一种带权路径长度最短的二叉树。
所谓树的带权路径长度，就是树中所有的叶结点的权值乘上其到根结点的路径长度（若根结点为0层，叶结点到根结点的路径长度为叶结点的层数）。
哈夫曼树因其对空间的节省性也多用于文件的压缩，其原理是对文件的从新编码，以节少不必要的空间，他的编码方法也称为哈夫曼编码。

如何构建哈夫曼树（简略）：
例如输入一串数字[1,4,6,7],程序会识别最小的两位数用于构建，即为[1,4],当识别完成后得到两数之和从新添加进入数组中比较，
删去已经取过的数据，即为[5,6,7]，之后程序会重复上面的操作直到只剩一个数据，即根节点。而这组数据也成为权重，用来记录字符出现的频率。

输入的每一串数据都为叶子节点，我们根据叶子节点一步一步构建上面的节点（就像一棵倒着的树一样），最后只留下一个节点，而这一切需要2n—1个
节点。

哈夫曼编码介绍：
哈夫曼编码是一串简单的二进制流文件，我们构建哈夫曼树后以根节点为起点，左边的路径为0，右边路径为1进行储存数据，当我们将这些01以字节形式存入
文件，就可以达到压缩的目的，而解压就是读取文件与存储的哈夫曼编码比较即可。
